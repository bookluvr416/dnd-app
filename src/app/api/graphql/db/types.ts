import {
  Generated,
  Insertable,
  Selectable,
  Updateable,
} from 'kysely'

export interface Database {
  characters: CharactersTable;
  skills: SkillsTable;
  races: RacesTable;
  classes: ClassesTable;
  alignment: AlignmentTable;
  abilities: AbilitiesTable;
  characterAbilities: CharacterAbilitiesTable;
  characterSkills: CharacterSkillsTable;
}

// This interface describes the `characters` table to Kysely. Table
// interfaces should only be used in the `Database` type above
// and never as a result type of a query!. See the `Character`,
// `NewCharacter` and `CharacterUpdate` types below.
export interface CharactersTable {
  // Columns that are generated by the database should be marked
  // using the `Generated` type. This way they are automatically
  // made optional in inserts and updates.
  id: Generated<number>
  name: string;
  level: number;
  raceId: number;
  classId: number;
  armorClass: number;
  speed: number;
  hp: number;
  initiative: number;
  proficiencyBonus: number;
  alignmentId: number;
}

export interface SkillsTable {
  id: Generated<number>;
  skill: string;
}

export interface RacesTable {
  id: Generated<number>;
  raceName: string;
  raceType: string;
}

export interface ClassesTable {
  id: Generated<number>;
  className: string;
}

export interface AlignmentTable {
  id: Generated<number>;
  alignment: string;
}

export interface AbilitiesTable {
  id: Generated<number>;
  ability: string;
}

export interface CharacterAbilitiesTable {
  id: Generated<number>;
  characterId: number;
  abilityId: number;
  abilityScore: number;
  proficiencyBonus: number;
}

export interface CharacterSkillsTable {
  id: Generated<number>;
  characterId: number;
  skillId: number;
  skillProficiency: number;
}

// You should not use the table schema interfaces directly. Instead, you should
// use the `Selectable`, `Insertable` and `Updateable` wrappers. These wrappers
// make sure that the correct types are used in each operation.
//
// Most of the time you should trust the type inference and not use explicit
// types at all. These types can be useful when typing function arguments.
export type Character = Selectable<CharactersTable>
export type NewCharacter = Insertable<CharactersTable>
export type CharacterUpdate = Updateable<CharactersTable>

export type CharacterAbilities = Selectable<CharacterAbilitiesTable>
export type NewCharacterAbilities = Insertable<CharacterAbilitiesTable>
export type CharacterAbilitiesUpdate = Updateable<CharacterAbilitiesTable>

export type CharacterSkills = Selectable<CharacterSkillsTable>
export type NewCharacterSkills = Insertable<CharacterSkillsTable>
export type CharacterSkillsUpdate = Updateable<CharacterSkillsTable>

export type Skills = Selectable<SkillsTable>

export type Races = Selectable<RacesTable>

export type Classes = Selectable<ClassesTable>

export type Alignment = Selectable<AlignmentTable>

export type Abilities = Selectable<AbilitiesTable>
